
================================================= Sat Apr  6 06:24:15 PM UTC 2024 =========================================================

[2024-04-06 14:24:17,282] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-04-06 14:24:18,771] [WARNING] [runner.py:202:fetch_hostfile] Unable to find hostfile, will proceed with training with local resources only.
Detected CUDA_VISIBLE_DEVICES=6: setting --include=localhost:6
[2024-04-06 14:24:18,771] [INFO] [runner.py:573:main] cmd = /home/akane38/miniconda3/envs/llava/bin/python -u -m deepspeed.launcher.launch --world_info=eyJsb2NhbGhvc3QiOiBbNl19 --master_addr=127.0.0.1 --master_port=29500 --enable_each_rank_log=None llava/train/multi_ve_train_mem.py --deepspeed ./scripts/zero2.json --model_name_or_path lmsys/vicuna-7b-v1.5 --version plain --data_path /data/data1/akane/LLaVA/data/blip_laion_cc_sbu_558k.json --image_folder /data/data1/akane/LLaVA/data/blip_laion_558k --multiple_vision_towers openai/clip-vit-large-patch14-336 facebook/dinov2-large --resampler_grid_size 24 --mm_projector_type mlp2x_gelu --tune_mm_mlp_adapter True --tune_mm_resampler True --mm_vision_select_layer -2 --mm_use_im_start_end False --mm_use_im_patch_token False --bf16 True --output_dir /data/data1/akane/mve-clip-dino-pretrain/checkpoints --num_train_epochs 1 --per_device_train_batch_size 32 --per_device_eval_batch_size 4 --gradient_accumulation_steps 8 --evaluation_strategy no --save_strategy steps --save_steps 24000 --max_steps 1 --save_total_limit 1 --learning_rate 1e-3 --weight_decay 0. --warmup_ratio 0.03 --lr_scheduler_type cosine --logging_steps 1 --tf32 True --model_max_length 2048 --gradient_checkpointing True --dataloader_num_workers 4 --lazy_preprocess True --report_to wandb --run_name mve-clip-dino-pretrain-7b-pt
[2024-04-06 14:24:20,772] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-04-06 14:24:22,492] [INFO] [launch.py:145:main] WORLD INFO DICT: {'localhost': [6]}
[2024-04-06 14:24:22,492] [INFO] [launch.py:151:main] nnodes=1, num_local_procs=1, node_rank=0
[2024-04-06 14:24:22,492] [INFO] [launch.py:162:main] global_rank_mapping=defaultdict(<class 'list'>, {'localhost': [0]})
[2024-04-06 14:24:22,493] [INFO] [launch.py:163:main] dist_world_size=1
[2024-04-06 14:24:22,493] [INFO] [launch.py:165:main] Setting CUDA_VISIBLE_DEVICES=6
[2024-04-06 14:24:25,502] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-04-06 14:24:26,687] [INFO] [comm.py:637:init_distributed] cdb=None
[2024-04-06 14:24:26,687] [INFO] [comm.py:668:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
You are using a model of type llama to instantiate a model of type llava_llama. This is not supported for all configurations of models and can yield errors.
You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]/home/akane38/miniconda3/envs/llava/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return self.fget.__get__(instance, owner)()
Loading checkpoint shards:  50%|█████     | 1/2 [00:03<00:03,  3.02s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:04<00:00,  1.88s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:04<00:00,  2.05s/it]
Projector param: torch.Size([4096, 1024]), 4194304
Projector param: torch.Size([4096]), 4096
Projector param: torch.Size([4096, 4096]), 16777216
Projector param: torch.Size([4096]), 4096
Resampler param: torch.Size([576, 1024]), 589824
Resampler param: torch.Size([576, 1024]), 589824
Resampler param: torch.Size([1024, 1024]), 1048576
Resampler param: torch.Size([3072, 1024]), 3145728
Resampler param: torch.Size([3072]), 3072
Resampler param: torch.Size([1024, 1024]), 1048576
Resampler param: torch.Size([1024]), 1024
Resampler param: torch.Size([1024]), 1024
Resampler param: torch.Size([1024]), 1024
Resampler param: torch.Size([1024]), 1024
Resampler param: torch.Size([1024]), 1024
Resampler param: torch.Size([1024]), 1024
Resampler param: torch.Size([1024]), 1024
MultiVELlavaLlamaForCausalLM(
  (model): MultiVELlavaLlamaModel(
    (embed_tokens): Embedding(32000, 4096, padding_idx=0)
    (layers): ModuleList(
      (0-31): 32 x LlamaDecoderLayer(
        (self_attn): LlamaFlashAttention2(
          (q_proj): Linear(in_features=4096, out_features=4096, bias=False)
          (k_proj): Linear(in_features=4096, out_features=4096, bias=False)
          (v_proj): Linear(in_features=4096, out_features=4096, bias=False)
          (o_proj): Linear(in_features=4096, out_features=4096, bias=False)
          (rotary_emb): LlamaRotaryEmbedding()
        )
        (mlp): LlamaMLP(
          (gate_proj): Linear(in_features=4096, out_features=11008, bias=False)
          (up_proj): Linear(in_features=4096, out_features=11008, bias=False)
          (down_proj): Linear(in_features=11008, out_features=4096, bias=False)
          (act_fn): SiLU()
        )
        (input_layernorm): LlamaRMSNorm()
        (post_attention_layernorm): LlamaRMSNorm()
      )
    )
    (norm): LlamaRMSNorm()
    (multiple_vision_towers): ModuleList(
      (0): CLIPVisionTower(
        (vision_tower): CLIPVisionModel(
          (vision_model): CLIPVisionTransformer(
            (embeddings): CLIPVisionEmbeddings(
              (patch_embedding): Conv2d(3, 1024, kernel_size=(14, 14), stride=(14, 14), bias=False)
              (position_embedding): Embedding(577, 1024)
            )
            (pre_layrnorm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (encoder): CLIPEncoder(
              (layers): ModuleList(
                (0-23): 24 x CLIPEncoderLayer(
                  (self_attn): CLIPAttention(
                    (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                  (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (mlp): CLIPMLP(
                    (activation_fn): QuickGELUActivation()
                    (fc1): Linear(in_features=1024, out_features=4096, bias=True)
                    (fc2): Linear(in_features=4096, out_features=1024, bias=True)
                  )
                  (layer_norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                )
              )
            )
            (post_layernorm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (1): DINOVisionTower(
        (vision_tower): Dinov2Model(
          (embeddings): Dinov2Embeddings(
            (patch_embeddings): Dinov2PatchEmbeddings(
              (projection): Conv2d(3, 1024, kernel_size=(14, 14), stride=(14, 14))
            )
            (dropout): Dropout(p=0.0, inplace=False)
          )
          (encoder): Dinov2Encoder(
            (layer): ModuleList(
              (0-23): 24 x Dinov2Layer(
                (norm1): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
                (attention): Dinov2Attention(
                  (attention): Dinov2SelfAttention(
                    (query): Linear(in_features=1024, out_features=1024, bias=True)
                    (key): Linear(in_features=1024, out_features=1024, bias=True)
                    (value): Linear(in_features=1024, out_features=1024, bias=True)
                    (dropout): Dropout(p=0.0, inplace=False)
                  )
                  (output): Dinov2SelfOutput(
                    (dense): Linear(in_features=1024, out_features=1024, bias=True)
                    (dropout): Dropout(p=0.0, inplace=False)
                  )
                )
                (layer_scale1): Dinov2LayerScale()
                (drop_path1): Identity()
                (norm2): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
                (mlp): Dinov2MLP(
                  (fc1): Linear(in_features=1024, out_features=4096, bias=True)
                  (activation): GELUActivation()
                  (fc2): Linear(in_features=4096, out_features=1024, bias=True)
                )
                (layer_scale2): Dinov2LayerScale()
                (drop_path2): Identity()
              )
            )
          )
          (layernorm): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
        )
      )
    )
    (resampler): Resampler(
      (kv_proj): Identity()
      (attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
      )
      (ln_q): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
      (ln_kv): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
      (ln_post): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
    )
    (mm_projector): Sequential(
      (0): Linear(in_features=1024, out_features=4096, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=4096, out_features=4096, bias=True)
    )
  )
  (lm_head): Linear(in_features=4096, out_features=32000, bias=False)
)
trainable=27412480
frozen=7346291712
Formatting inputs...Skip in lazy mode
wandb: Currently logged in as: compyle. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.16.6 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.16.3
wandb: Run data is saved locally in /home/akane38/LLaVA/wandb/run-20240406_142457-l60fm9me
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run mve-clip-dino-pretrain-7b-pt
wandb: ⭐️ View project at https://wandb.ai/compyle/multi-ve-llava
wandb: 🚀 View run at https://wandb.ai/compyle/multi-ve-llava/runs/l60fm9me
  0%|          | 0/1 [00:00<?, ?it/s]/home/akane38/miniconda3/envs/llava/lib/python3.10/site-packages/torch/utils/checkpoint.py:429: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(
/home/akane38/miniconda3/envs/llava/lib/python3.10/site-packages/torch/utils/checkpoint.py:61: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
/home/akane38/miniconda3/envs/llava/lib/python3.10/site-packages/deepspeed/runtime/zero/stage_1_and_2.py:1652: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at ../torch/csrc/tensor/python_tensor.cpp:83.)
  total_norm_cuda = get_accelerator().FloatTensor([float(total_norm)])
100%|██████████| 1/1 [00:39<00:00, 39.08s/it]                                             {'loss': 9.8372, 'learning_rate': 0.001, 'epoch': 0.0}
100%|██████████| 1/1 [00:39<00:00, 39.08s/it]                                             {'train_runtime': 42.6539, 'train_samples_per_second': 6.002, 'train_steps_per_second': 0.023, 'train_loss': 9.837165832519531, 'epoch': 0.0}
100%|██████████| 1/1 [00:39<00:00, 39.08s/it]100%|██████████| 1/1 [00:39<00:00, 39.33s/it]
Saving mm adapter
Saving resampler
wandb: - 0.034 MB of 0.034 MB uploadedwandb: \ 0.034 MB of 0.034 MB uploadedwandb: | 0.034 MB of 0.034 MB uploadedwandb: / 0.034 MB of 0.034 MB uploadedwandb: - 0.034 MB of 0.034 MB uploadedwandb: \ 0.064 MB of 0.083 MB uploaded (0.027 MB deduped)wandb: 
wandb: Run history:
wandb:                    train/epoch ▁▁
wandb:              train/global_step ▁▁
wandb:            train/learning_rate ▁
wandb:                     train/loss ▁
wandb:               train/total_flos ▁
wandb:               train/train_loss ▁
wandb:            train/train_runtime ▁
wandb: train/train_samples_per_second ▁
wandb:   train/train_steps_per_second ▁
wandb: 
wandb: Run summary:
wandb:                    train/epoch 0.0
wandb:              train/global_step 1
wandb:            train/learning_rate 0.001
wandb:                     train/loss 9.8372
wandb:               train/total_flos 340665632292864.0
wandb:               train/train_loss 9.83717
wandb:            train/train_runtime 42.6539
wandb: train/train_samples_per_second 6.002
wandb:   train/train_steps_per_second 0.023
wandb: 
wandb: 🚀 View run mve-clip-dino-pretrain-7b-pt at: https://wandb.ai/compyle/multi-ve-llava/runs/l60fm9me
wandb: ️⚡ View job at https://wandb.ai/compyle/multi-ve-llava/jobs/QXJ0aWZhY3RDb2xsZWN0aW9uOjE1NDcyNDExNg==/version_details/v9
wandb: Synced 7 W&B file(s), 0 media file(s), 3 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240406_142457-l60fm9me/logs
[2024-04-06 14:25:52,589] [INFO] [launch.py:347:main] Process 877432 exits successfully.
